{
  "name": "simply-is",
  "version": "2.5.5",
  "description": "An expressive type testing library",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/anonmily/simply-is.git"
  },
  "main": "index.js",
  "scripts": {
    "test": "mocha --reporter nyan test"
  },
  "keywords": [
    "type",
    "utility",
    "util",
    "boolean",
    "typing",
    "type testing",
    "type check"
  ],
  "author": {
    "name": "Michelle Liu",
    "email": "michelle@michelleliu.io",
    "url": "http://michelleliu.io"
  },
  "license": "MIT",
  "dependencies": {},
  "devDependencies": {
    "mocha": "^2.2.5",
    "should": "^7.0.2"
  },
  "readme": "Simply Is\n====================\n![Simply Is Dependency badge](https://david-dm.org/anonmily/simply-is.svg)\n\nAn expressive type testing utility library.\n\n[GITHUB:\thttps://github.com/anonmily/simply-is](https://github.com/anonmily/simply-is)\n\n[NPM:\t\thttps://www.npmjs.com/package/simply-is](https://www.npmjs.com/package/simply-is)\n\n## Installation - Node\nTo install as a Node package, simply install via npm:\n\n    npm install simply-is\n\nThen, you can require and start using the package as you wish:\n\n\tvar is = require('simply-is');\n\tconsole.log( is('300').a.number );\n\n## Installation - Bower/Frontend\nThe package can be installed via Bower:\n\n    bower install simply-is\n\nSimplyIs can also be [downloaded](https://raw.githubusercontent.com/anonmily/simply-is/master/simplyis.js) directly.\n\nNote, for frontend use, the file that should be included is **simplyis.js**:\n\n    <script src='/bower_components/simplyis/simplyis.js'></script>\n\nThe script is available as a global module as well as an AMD module. As a global module, it can be accessed through **window.simplyIs**.\n\n    var is = window.simplyIs;\n    console.log( is('300').a.number );\n\n---\n\n## Usage\n\n## Example\n\tvar is = require('simply-is');\n\n\tis.object({}); \t\t\t//true\n\tis.a.string('hello')\t//chaining\n\tis.not.an.array({})\t\t//negation\n\t\n\t//alternative syntax\n\tis(3).even\n\tis('hello').a.string\n\tis('[{\"key\":\"somevalue\"}]').json\n\n\n## Basics\n\tis.argument \t( (function(){ return arguments; })(1,2,3) )\n\tis.array \t\t([1,2,3])\n\tis.boolean \t\t(1==1)\n\tis.date \t\t(new Date())\n\tis.defined \t\t(1)\n\tis.function \t(function(){return 'hi'})\n\tis.json \t\t('[{\"key\":\"somevalue\"}]')\n\tis.null \t\t(Null)\n\tis.number \t\t(1)\n\tis.object \t\t({})\n\tis.regexp \t\t(/abc/)\n\tis.string \t\t('hello world')\n\tis.undefined \t(undefined)\n\n\n## Utility\n\tis.empty\t\t({}) \t//true for {}, [], 0, \"\", null, undefined, false\n\tis.equal \t\t( {a: 1, b: \"hello\"}, {b:\"hello\", a:1} )\n\tis.sameType \t({\ta: 1, b: \"hello\" }, { a: \"number\", b: \"string\" })\n\n\tis.inArray \t\t('a',['a','b','c'])\n\n\tis.inObject \t('apple',{fruit: 'apple'})\n\tis.inObject \t('fruit',{fruit: 'apple'})\n\n\tis.instanceOf \t( doberman, DogConstructor )\n\n## Contains/inside\n\tis.inside(\"fred\", {\"user\": \"fred\", \"age\":40 })\n\tis.inside(\"age\", {\"user\": \"fred\", \"age\":40 })\n\tis.inside(\"apple\",[\"peach\",\"apple\",\"grapes\"])\n\tis.inside(\"cat\",\"I love cats\")\n\n\tis(\"fred\").inside({\"user\": \"fred\", \"age\":40 })\n\tis(\"age\").inside({\"user\": \"fred\", \"age\":40 })\n\tis(\"apple\").inside([\"peach\",\"apple\",\"grapes\"])\n\tis(\"cat\").inside(\"I love cats\")\n\n## Numbers\n\tis.number\t\t(1)\n\tis.nan\t\t\t(NaN)\n\tis.infinite\t\t(Infinity)\n\tis.even\t\t\t(2)\n\tis.odd\t\t\t(3)\n\tis.integer \t\t(10)\n\tis.decimal \t\t(10.5)\n\n## Booleans\n\tis.boolean  \t(true)\n\tis.true\t\t\t(1==1)\n\tis.false\t\t(1==2)\n\t\n---\n## TODO\n\n1. is.csv\n2. is.yaml\n3. is.xml\n4. is.deepEqual\n\n---\n## Changelog\n| Version | Notes                                                                                                                                                                            |\n|---------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| _2.4.7_   | Used getter functions for isfunc to improve performance. The result of the comparison will only run when the result is needed/requested rather than stored in a static property. |\n| _2.5.5_   | Added in is.equal and is.sameType                                                                                                                                                |\n",
  "readmeFilename": "README.md",
  "gitHead": "6f61c6779e30c60058d80a67c470e8391e1e76f4",
  "bugs": {
    "url": "https://github.com/anonmily/simply-is/issues"
  },
  "homepage": "https://github.com/anonmily/simply-is#readme",
  "_id": "simply-is@2.5.5",
  "_shasum": "d1c5e1e5fc8dfb2dc059ff656e631ec2758419c1",
  "_from": "simply-is@*"
}
